import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.utilities.FormatChecker;

/**
 * Execution of the de Jager formula.
 *
 * @author Vaishnavi Kasabwala
 *
 */
public final class ABCDGuesser1 {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private ABCDGuesser1() {
    }

    /**
     * Repeatedly asks the user for a positive real number until the user enters
     * one. Returns the positive real number.
     *
     * @param in
     *            the input stream
     * @param out
     *            the output stream
     * @return a positive real number entered by the user
     */
    private static double getPositiveDouble(SimpleReader in, SimpleWriter out) {

        out.println("Please enter a positive number that has a demical.");
        String x = in.nextLine();

        while (Double.parseDouble(x) < 1 || !FormatChecker.canParseDouble(x)) {
            out.println("Please enter a positive number that has a demical.");
            x = in.nextLine();
        }

        return Double.parseDouble(x);
    }

    /**
     * Repeatedly asks the user for a positive real number not equal to 1.0
     * until the user enters one. Returns the positive real number.
     *
     * @param in
     *            the input stream
     * @param out
     *            the output stream
     * @return a positive real number not equal to 1.0 entered by the user
     */
    private static double getPositiveDoubleNotOne(SimpleReader in,
            SimpleWriter out) {
        double x = getPositiveDouble(in, out);

        while (x == 1) {
            out.println("Number can not be 1. Please try again.");
            x = getPositiveDouble(in, out);
        }

        return x;
    }

    /**
     * Evaluates the jager formula.
     */
    private static void jager() {

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        /*
         * Gets values for the variables
         */

        double mu = getPositiveDouble(in, out);
        double w = getPositiveDoubleNotOne(in, out);
        double x = getPositiveDoubleNotOne(in, out);
        double y = getPositiveDoubleNotOne(in, out);
        double z = getPositiveDoubleNotOne(in, out);

        double[] arr = { -5, -4, -3, -2, -1, -1 / 2, -1 / 3, -1 / 4, 0, 1 / 4,
                1 / 3, 1 / 2, 1, 2, 3, 4, 5 };
        double error;
        double a, b, c, d, tmp;
        for (int i = 0; i < arr.length; i++) {
            a = arr[i];
            for (int j = 0; j < arr.length; j++) {
                b = arr[j];
                for (int k = 0; k < arr.length; k++) {
                    c = arr[k];
                    for (int g = 0; g < arr.length; g++) {
                        d = arr[g];
                        tmp = (Math.pow(w, a) * Math.pow(x, b) * Math.pow(y, c)
                                * Math.pow(z, d));
                    }
                }
            }
        }
        out.println(tmp + " " + mu)
        out.println(mu + " " + w + " " + x + " " + y + " " + z + " ");

        /*
         * Close input and output streams
         */
        in.close();
        out.close();
    }

}
